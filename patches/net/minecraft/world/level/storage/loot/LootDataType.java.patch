--- a/net/minecraft/world/level/storage/loot/LootDataType.java
+++ b/net/minecraft/world/level/storage/loot/LootDataType.java
@@ -18,15 +_,29 @@
     private static final Logger LOGGER = LogUtils.getLogger();
     public static final LootDataType<LootItemCondition> PREDICATE = new LootDataType<>(LootItemConditions.CODEC, "predicates", createSimpleValidator());
     public static final LootDataType<LootItemFunction> MODIFIER = new LootDataType<>(LootItemFunctions.CODEC, "item_modifiers", createSimpleValidator());
-    public static final LootDataType<LootTable> TABLE = new LootDataType<>(LootTable.CODEC, "loot_tables", createLootTableValidator());
+    public static final LootDataType<LootTable> TABLE = new LootDataType<>(LootTable.CODEC, "loot_tables", createLootTableValidator(), LootTable.EMPTY, LootTable::setLootTableId);
     private final Codec<T> codec;
     private final String directory;
     private final LootDataType.Validator<T> validator;
+    @org.jetbrains.annotations.Nullable
+    private final T defaultValue;
+    private final Codec<Optional<T>> conditionalCodec;
+    private final java.util.function.BiConsumer<T, ResourceLocation> idSetter;
 
+    /**
+     * @deprecated Neo: use the constructor {@link #LootDataType(Codec, String, Validator, T, java.util.function.BiConsumer) with a default value and id setter} to support conditions
+     */
+    @Deprecated
     private LootDataType(Codec<T> p_298773_, String p_279433_, LootDataType.Validator<T> p_279363_) {
+        this(p_298773_, p_279433_, p_279363_, null, (it, id) -> {});
+    }
+    private LootDataType(Codec<T> p_298773_, String p_279433_, LootDataType.Validator<T> p_279363_, @org.jetbrains.annotations.Nullable T defaultValue, java.util.function.BiConsumer<T, ResourceLocation> idSetter) {
         this.codec = p_298773_;
         this.directory = p_279433_;
         this.validator = p_279363_;
+        this.defaultValue = defaultValue;
+        this.idSetter = idSetter;
+        this.conditionalCodec = net.neoforged.neoforge.common.conditions.ConditionalOps.createConditionalCodec(codec);
     }
 
     public String directory() {
@@ -38,9 +_,12 @@
     }
 
     public <V> Optional<T> deserialize(ResourceLocation p_279253_, DynamicOps<V> p_324006_, V p_324329_) {
-        DataResult<T> dataresult = this.codec.parse(p_324006_, p_324329_);
+        var dataresult = this.conditionalCodec.parse(p_324006_, p_324329_);
         dataresult.error().ifPresent(p_297991_ -> LOGGER.error("Couldn't parse element {}:{} - {}", this.directory, p_279253_, p_297991_.message()));
-        return dataresult.result();
+        return dataresult.result().map(it -> {
+            it.ifPresent(val -> idSetter.accept(val, p_279253_));
+            return it.orElse(defaultValue);
+        });
     }
 
     public static Stream<LootDataType<?>> values() {
@@ -54,9 +_,12 @@
     }
 
     private static LootDataType.Validator<LootTable> createLootTableValidator() {
-        return (p_279333_, p_279227_, p_279406_) -> p_279406_.validate(
-                p_279333_.setParams(p_279406_.getParamSet()).enterElement("{" + p_279227_.type().directory + ":" + p_279227_.location() + "}", p_279227_)
+        return (p_279333_, p_279227_, p_279406_) -> {
+            p_279406_ = net.neoforged.neoforge.event.EventHooks.loadLootTable(p_279406_.getLootTableId(), p_279406_);
+            p_279406_.validate(
+                    p_279333_.setParams(p_279406_.getParamSet()).enterElement("{" + p_279227_.type().directory + ":" + p_279227_.location() + "}", p_279227_)
             );
+        };
     }
 
     @FunctionalInterface
