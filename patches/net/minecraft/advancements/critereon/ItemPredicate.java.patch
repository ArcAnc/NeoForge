--- a/net/minecraft/advancements/critereon/ItemPredicate.java
+++ b/net/minecraft/advancements/critereon/ItemPredicate.java
@@ -32,9 +_,10 @@
     List<EnchantmentPredicate> storedEnchantments,
     Optional<HolderSet<Potion>> potions,
     Optional<NbtPredicate> customData,
-    DataComponentPredicate components
+    DataComponentPredicate components,
+    Optional<net.neoforged.neoforge.common.advancements.critereon.ICustomItemPredicate> customLogic
 ) {
-    public static final Codec<ItemPredicate> CODEC = RecordCodecBuilder.create(
+    public static final Codec<ItemPredicate> VANILLA_CODEC = RecordCodecBuilder.create(
         p_329682_ -> p_329682_.group(
                     ExtraCodecs.strictOptionalField(RegistryCodecs.homogeneousList(Registries.ITEM), "items").forGetter(ItemPredicate::items),
                     ExtraCodecs.strictOptionalField(MinMaxBounds.Ints.CODEC, "count", MinMaxBounds.Ints.ANY).forGetter(ItemPredicate::count),
@@ -50,7 +_,41 @@
                 .apply(p_329682_, ItemPredicate::new)
     );
 
+    public static final Codec<ItemPredicate> CODEC = ExtraCodecs.<net.neoforged.neoforge.common.advancements.critereon.ICustomItemPredicate, ItemPredicate>either(
+            net.neoforged.neoforge.registries.NeoForgeRegistries.ITEM_PREDICATE_SERIALIZERS.byNameCodec()
+                    .dispatch(
+                            net.neoforged.neoforge.common.advancements.critereon.ICustomItemPredicate::codec,
+                            java.util.function.Function.identity()),
+            VANILLA_CODEC
+    ).xmap(either -> either.map(ItemPredicate::new, p -> p), predicate -> {
+        // Serialize using dispatch codec if custom logic is present, otherwise use vanilla codec
+        if (predicate.customLogic.isPresent()) {
+            return com.mojang.datafixers.util.Either.left(predicate.customLogic.get());
+        } else {
+            return com.mojang.datafixers.util.Either.right(predicate);
+        }
+    });
+
+    public ItemPredicate(
+            Optional<HolderSet<Item>> items,
+            MinMaxBounds.Ints count,
+            MinMaxBounds.Ints durability,
+            List<EnchantmentPredicate> enchantments,
+            List<EnchantmentPredicate> storedEnchantments,
+            Optional<HolderSet<Potion>> potions,
+            Optional<NbtPredicate> customData,
+            DataComponentPredicate components) {
+        this(items, count, durability, enchantments, storedEnchantments, potions, customData, components, Optional.empty());
+    }
+
+    public ItemPredicate(net.neoforged.neoforge.common.advancements.critereon.ICustomItemPredicate customLogic) {
+        this(Optional.empty(), MinMaxBounds.Ints.ANY, MinMaxBounds.Ints.ANY, List.of(), List.of(), Optional.empty(), Optional.empty(), DataComponentPredicate.EMPTY, Optional.of(customLogic));
+    }
+
     public boolean matches(ItemStack p_45050_) {
+        if (this.customLogic.isPresent()) {
+            return this.customLogic.get().test(p_45050_);
+        }
         if (this.items.isPresent() && !p_45050_.is(this.items.get())) {
             return false;
         } else if (!this.count.matches(p_45050_.getCount())) {
@@ -63,7 +_,7 @@
             return false;
         } else {
             if (!this.enchantments.isEmpty()) {
-                ItemEnchantments itemenchantments = p_45050_.getOrDefault(DataComponents.ENCHANTMENTS, ItemEnchantments.EMPTY);
+                ItemEnchantments itemenchantments = p_45050_.getAllEnchantments();
 
                 for(EnchantmentPredicate enchantmentpredicate : this.enchantments) {
                     if (!enchantmentpredicate.containedIn(itemenchantments)) {
